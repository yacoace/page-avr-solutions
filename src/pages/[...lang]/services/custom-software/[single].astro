---
import ImageMod from "@/components/ImageMod.astro";
import config from "@/config/config.json";
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import {
  getLangFromUrl,
  getTranslations,
  supportedLang,
} from "@/lib/utils/languageParser";
import { markdownify, titleify } from "@/lib/utils/textConverter";
import PageHeader from "@/partials/PageHeader.astro";
import type { ContentEntryMap } from "astro:content";
import { FaDownload, FaRegFilePdf } from "react-icons/fa6";
const { contact_form_action } = config.params;

export async function getStaticPaths() {
  const paths = await Promise.all(
    supportedLang.map(async (lang) => {
      const services = await getSinglePage(
        "services",
        lang as keyof ContentEntryMap,
        "custom-software"
      );

      return services.map((service) => ({
        params: {
          lang: lang || undefined,
          single: service.slug.split("/").pop(),
        },
        props: {
          service,
        },
      }));
    }),
  );
  return paths.flat();
}

const { service } = Astro.props;
const { lang } = Astro.params;
const { title, meta_title, description, image, pdf } = service.data;
const { Content } = await service.render();
const land = getLangFromUrl(Astro.url);
const allServices = await getSinglePage(
  "services",
  land as keyof ContentEntryMap,
  "custom-software"
);

const serviceData = allServices.map((service) => {
  const parts = service.slug.split("/");
  return {
    slug1: parts[1],
    slug2: parts[2],
    title: service.data.title
  };
});

const {
  send_message,
  placeholder_name,
  placeholder_email,
  placeholder_subject,
  placeholder_message,
  placeholder_phone,
  quick_contact,
  download_pdf,
  our_services,
} = await getTranslations(lang as keyof ContentEntryMap);
---

<Base
  title={title}
  meta_title={meta_title}
  description={description}
  image={image}
>
  <PageHeader title={title} />

  <section class="section">
    <div class="container">
      <div class="row mx-auto">
        <aside class="lg:col-4">
          <!-- service list -->
          <div class="bg-white px-8 py-10 box-shadow mb-12">
            <h5 class="mb-5">{our_services}</h5>
            <ul class="list-styled style-circle space-y-4">
              {
                serviceData.map((serviceItem) => (
                  <li class="border-b border-border pb-4">
                    <a
                      href={`/services/${serviceItem.slug1}/${serviceItem.slug2}`}
                      class={
                        service.slug.split("/")[2] === serviceItem.slug2
                          ? "text-primary"
                          : "text-text" + "block no-underline"
                      }
                    >
                      {serviceItem.title}
                    </a>
                  </li>
                ))
              }
            </ul>
          </div>
          <!-- pdf download -->
          {
            pdf && pdf.enable && (
              <div class="bg-white px-8 py-10 box-shadow mb-12">
                <h5 class="mb-5">{download_pdf}</h5>
                <ul class="list-unstyled relative">
                  <li class="flex pb-3 mb-3 border-b border-border items-center">
                    <FaRegFilePdf className="text-primary icon-sm" />
                    <div class="ms-3">
                      <p
                        class="mb-0 text-dark/80"
                        set:html={markdownify(pdf.title)}
                      />
                      <span
                        class="text-dark/80"
                        set:html={markdownify(pdf.size)}
                      />
                    </div>
                    <a href={pdf.file} class="text-text ml-auto stretched-link">
                      <FaDownload className="icon-xs" />
                    </a>
                  </li>
                </ul>
              </div>
            )
          }
          <!-- quick contact -->
          <div class="bg-white px-8 py-10 box-shadow mb-12 sticky top-28">
            <h5 class="mb-5">{quick_contact}</h5>
            <form id="contact-form-2">
              <input
                type="text"
                name="name"
                id="name"
                class="form-control form-control-sm w-full border-0 rounded-0 box-shadow mb-3"
                placeholder={placeholder_name}
              />
              <input
                type="email"
                name="email"
                id="mail"
                class="form-control form-control-sm w-full border-0 rounded-0 box-shadow mb-3"
                placeholder={placeholder_email}
              />
              <input
                type="tel"
                name="phone"
                id="phone"
                class="form-control form-control-sm w-full border-0 rounded-0 box-shadow mb-3"
                placeholder={placeholder_phone}
              />
              <input
                type="text"
                name="subject"
                id="subject"
                class="form-control form-control-sm w-full border-0 rounded-0 box-shadow mb-3"
                placeholder={placeholder_subject}
              />
              <textarea
                name="message"
                id="message"
                class="form-control form-control-sm w-full border-0 rounded-0 box-shadow mb-3 py-3 px-4"
                placeholder={placeholder_message}></textarea>
              <button type="submit" value="send" class="btn btn-primary">
                {send_message}
              </button>
            </form>
          </div>
        </aside>

        <div class="lg:col-8">
          <ImageMod
            src={image}
            class="mb-10 w-full"
            width={1000}
            height={900}
            alt={title}
          />
          <div class="content">
            <Content />
          </div>
        </div>
      </div>
    </div>
  </section>


<script 
  define:vars={{
    send_message,
  }}
  is:inline
>
  function loadEmailJSScript() {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = './../../../public/scripts/emailjs.min.js'; 
      script.onload = resolve;
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }

  function initializeEmailJS() {
    if (typeof emailjs !== 'undefined') {

      emailjs.init({
        publicKey: "8rtkiGOe8sWOc9CHN",
      });

      const form = document.getElementById('contact-form-2');
      if (form) {
        form.addEventListener('submit', function(event) {
          event.preventDefault(); 

          const submitButton = this.querySelector('button[type="submit"]');
          submitButton.disabled = true;
          submitButton.textContent = 'Enviando...';

          // Usa emailjs.sendForm
          emailjs.sendForm('service_wrzj5pc', 'template_vj02dy9', this)
            .then(
              (response) => {
                console.log('SUCCESS!', response.status, response.text);
                alert('¡Mensaje enviado exitosamente!');
                this.reset();
              },
              (error) => {
                console.error('FAILED...', error);
                alert('No se pudo enviar el mensaje. Por favor, intenta nuevamente.');
              }
            )
            .finally(() => {
              submitButton.disabled = false;
              submitButton.textContent = send_message;
            });
        });
      }
    } else {
      console.error('EmailJS no está cargado correctamente.');
    }
  }

  loadEmailJSScript()
    .then(() => {
      initializeEmailJS();
    })
    .catch(() => {
      console.error('No se pudo cargar el script de EmailJS.');
    });

  window.addEventListener('astro:after-swap', () => {
    loadEmailJSScript()
      .then(() => {
        initializeEmailJS();
      })
      .catch(() => {
        console.error('No se pudo cargar el script de EmailJS después de la navegación.');
      });
  });
</script>

</Base>
