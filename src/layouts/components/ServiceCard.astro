---
import ImageMod from "@/components/ImageMod.astro";
import DynamicIcon from "@/helpers/DynamicIcon";
import {
  getLangFromUrl,
  getTranslations,
  slugSelector,
} from "@/lib/utils/languageParser";
import { markdownify, plainify } from "@/lib/utils/textConverter";
import type { ContentEntryMap } from "astro:content";

const { services } = Astro.props;
const lang = getLangFromUrl(Astro.url);

const categories = [
  ...new Set(
    services.map((service: Service) =>
      service.data.category?.toLowerCase()
    )
  ),
];

const { read_more } = await getTranslations(lang as keyof ContentEntryMap);

type Service = {
  slug: string;
  data: {
    title: string;
    description: string;
    icon: string;
    image: string;
    category: string;
  };
  body: string;
};
---

<div class="container">
  <!-- Filtro de categorÃ­as -->
  <ul class="flex justify-center items-center flex-wrap mb-7 shuffle-filter">
    <li class="selected" data-target="all">
      <button
        type="button"
        class="m-3 inline-block text-dark py-3 font-secondary uppercase font-medium text-lg"
      >
        All
      </button>
    </li>
    {
      categories.map((category) => (
        <li data-target={category}>
          <button
            type="button"
            class="m-3 inline-block text-dark py-3 font-secondary uppercase font-medium text-lg"
          >
            {category}
          </button>
        </li>
      ))
    }
  </ul>

  <!-- Servicios filtrables -->
  <ul class="row g-4 shuffle-container">
    {
      services?.map((service: Service) => {
        const slugParts = service.slug.split("/");
        slugParts[0] = "services";
        const modifiedSlug = slugParts.join("/");
        service.slug = modifiedSlug;

        return (
          <li
            class="lg:col-4 sm:col-6 mb-4"
            data-groups={`["${service.data.category.toLowerCase()}","all"]`}
          >
            <div class="box-shadow">
              <ImageMod
                src={service.data.image}
                class="bg-cover object-contain w-full"
                alt={service.data.title}
                format="webp"
                width={445}
                height={230}
              />
              <div class="relative">
                <div class="bg-primary rounded-full w-[60px] h-[60px] flex justify-center items-center absolute -top-24 left-4">
                  <DynamicIcon
                    icon={service.data.icon}
                    className="text-white text-3xl"
                  />
                </div>

                <div class="p-4 bg-white">
                  <h5>
                    <a
                      href={slugSelector(`/${service.slug}`, lang)}
                      class="text-dark hover:text-primary duration-200"
                      set:html={markdownify(service.data.title)}
                    />
                  </h5>
                  <p
                    class="mt-2 mb-4 line-clamp-2"
                    set:html={plainify(service?.body)}
                  />
                  <a
                    href={slugSelector(`/${service.slug}`, lang)}
                    class="btn btn-secondary btn-arrow"
                  >
                    {read_more}
                  </a>
                </div>
              </div>
            </div>
          </li>
        );
      })
    }
  </ul>
</div>

<script>
  import Shuffle from "shufflejs";

  document.addEventListener("astro:page-load", () => {
    let element = document.querySelector(".shuffle-container") as HTMLElement;

    let shuffleInstance = new Shuffle(element, {
      itemSelector: "li",
    });

    // Apply the default filter to show all items
    shuffleInstance.filter("all");

    const filter = document.querySelector(".shuffle-filter");
    const filtterLists = Array.from(filter?.children || []);
    filtterLists.forEach((list) => {
      const button = list.querySelector("button");
      if (list.classList.contains("selected")) {
        button?.classList.add("text-primary");
      }
      button?.addEventListener("click", function () {
        filtterLists.forEach((list) => {
          list.classList.remove("selected");
          list.querySelector("button")?.classList.remove("text-primary");
        });
        this.parentElement?.classList.add("selected");
        this.classList.add("text-primary");
        const keyword = list.getAttribute("data-target");
        shuffleInstance.filter(keyword!);
      });
    });
  });
</script>
